#!/bin/bash
# set -x  # Enables printing of all commands

echo "Do you want to have everything run automatically? (Yes/No)"
read master_answer

# Change hostname
echo "Before we begin, do you want to change your hostname? (Y/N)"
read download_package
if [[ ${download_package,,} == "y" ]]; then
    echo "Please enter your desired hostname:"
    read desired_hostname
    echo "Changing hostname to $desired_hostname"
    sudo hostnamectl set-hostname "$desired_hostname" || echo "Failed to change hostname"
fi

# List of available browsers
browsers=("Firefox" "Chromium" "Tor Browser" "Vivaldi" "Haskell" "Librewolf" "Opera" "SKIP")

echo "Available browsers:"
for ((i = 0; i < ${#browsers[@]}; i++)); do
    echo "$((i + 1)). ${browsers[i]}"
done

# Prompt user for selection
read -p "Enter the number(s) corresponding to your choice(s), separated by spaces (for example, "1 3 4 6"): " selected_indices

# Convert selected_indices to an array of integers
selected_indices=($selected_indices)

# Download selected browsers
for index in ${selected_indices[@]}; do
    browser="${browsers[index - 1]}"
    case "$browser" in
        "Firefox")   # Download Firefox
            echo "Downloading Firefox..."
            sudo pacman -S --noconfirm firefox || echo "Failed to download Firefox"
            ;;
        "Chromium")   # Download Chromium
            echo "Downloading Chromium..."
            sudo pacman -S --noconfirm chromium || echo "Failed to download Chromium"
            ;;
		"Tor Browser")   # Download Tor Browser
            echo "Downloading Tor Browser..."
            sudo pacman -S --noconfirm torbrowser-launcher || echo "Failed to download Tor Browser"
            ;;
		"Vivaldi")   # Download Vivaldi
            echo "Downloading Vivaldi..."
            sudo pacman -S --noconfirm vivaldi || echo "Failed to download Vivaldi"
            ;;
		"Haskell")   # Download Haskell
			echo "Downloading Haskell..."
            sudo pacman -S --noconfirm haskell-open-browser || echo "Failed to download Haskell"
            ;;
		"Librewolf")   # Download Librewolf
			echo "Downloading librewolf..."
            git clone https://gitlab.com/librewolf-community/browser/arch.git || echo "Failed to download Librewolf"
			cd arch/
			gpg --recv-key EBE41E90F6F12F6D
			makepkg -si
			cd ..
            ;;
		"Opera")   # Download Opera
            echo "Downloading Opera..."
            sudo pacman -S --noconfirm opera || echo "Failed to download Opera"
            ;;
		"SKIP")   # Skip
            echo "Skipping browser installation..."
            ;;
        *)
            echo "Invalid selection: $browser"
            ;;
    esac
done

echo "Finished!"

# Updates packages

echo "Updating packages - required"
sudo pacman -Syu --noconfirm
echo "All packages updated sucessfully"

# Downloads required packages
echo "downloading neccesary packages - required"
# git
echo "Downloading git"
sudo pacman -S --noconfirm git
# yay
echo "Downloading yay"
sudo pacman -Syu --noconfirm --needed base-devel git
git clone https://aur.archlinux.org/yay.git
cd yay
gpg --recv-key EBE41E90F6F12F6D
makepkg -si
cd ..
# snapd
echo "Downloading snapd"
git clone https://aur.archlinux.org/snapd.git
cd snapd
makepkg -si
sudo systemctl enable --now snapd.socket
sudo ln -s /var/lib/snapd/snap /snap

# Creating master_answer function data
if [[ ${master_answer,,} = "yes" ]]; then
    auto_confirm=true
    echo "starting automatic setup"
elif [[ ${master_answer,,} = "no" ]]; then
    echo "starting manual setup" ||
    auto_confirm=false
fi

# making user directories
if [[ ${master_answer,,} = "yes" ]]; then
    echo "Making user directories"
    sudo pacman -S --noconfirm xdg-user-dirs
	xdg-user-dirs-update
elif [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to add user directories? (Y/N)"
    read download_answer
    if [[ ${download_answer,,} = "y" || $download_answer = "" ]]; then
      echo "Making user directories"
      sudo pacman -S --noconfirm xdg-user-dirs
	  xdg-user-dirs-update
    elif [[ ${download_answer,,} = "n" ]]; then
        echo "Skipping user directories"
    else
        echo "Invalid input. Please enter a valid input"
    fi
fi

# edits pacman config file for parallel downloads
if [[ ${master_answer,,} = "yes" ]]; then
    echo "Configuring pacman parallel downloads"
	# Back up OG file
    sudo cp /etc/pacman.conf /etc/pacman.conf.bak || { echo "Failed to copy pacman .conf file"; exit 1; }
	# Uncomment Parallel Downloads line
    sudo sed -i '/ParallelDownloads/c\ParallelDownloads=5' /etc/pacman.conf || echo "Failed to eonfigure pacman parallel downloads"
elif [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to configure pacman parallel downloads? (Y/N)"
    read download_answer
    if [[ ${download_answer,,} = "y" || $download_answer = "" ]]; then
        echo "Configuring pacman parallel downloads"
      sudo cp /etc/pacman.conf /etc/pacman.conf.bak || { echo "Failed to copy pacman .conf file"; exit 1; }
	# Uncomment Parallel Downloads line
    sudo sed -i '/ParallelDownloads/c\ParallelDownloads=5' /etc/pacman.conf || echo "Failed to eonfigure pacman parallel downloads"
    elif [[ ${download_answer,,} = "n" ]]; then
        echo "Download cancelled"
    else
        echo "Invalid input. Please enter a valid input"
    fi
fi

# Downloading essential packages
if [[ ${master_answer,,} = "yes" ]]; then
    echo "Downloading essential packages"
    sudo pacman -S --noconfirm enchant mythes-en ttf-liberation hunspell-en_US ttf-bitstream-vera pkgstats adobe-source-sans-pro-fonts gst-plugins-good ttf-droid ttf-dejavu aspell-en icedtea-web gst-libav ttf-ubuntu-font-family ttf-anonymous-pro jre8-openjdk languagetool libmythes pip
	echo "Essential packages downloaded sucessfully"
elif [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to download essential packages? (Y/N)"
    read download_answer
    if [[ ${download_answer,,} = "y" || $download_answer = "" ]]; then
    echo "Downloading essential packages"
	sudo pacman -S --noconfirm enchant mythes-en ttf-liberation hunspell-en_US ttf-bitstream-vera pkgstats adobe-source-sans-pro-fonts gst-plugins-good ttf-droid ttf-dejavu aspell-en icedtea-web gst-libav ttf-ubuntu-font-family ttf-anonymous-pro jre8-openjdk languagetool libmythes pip
    elif [[ ${download_answer,,} = "n" ]]; then
        echo "Skipping essential packages"
    else
        echo "Invalid input. Please enter a valid input"
    fi
fi
# Microcode install
# Function to detect CPU brand
if [[ ${master_answer,,} = "yes" ]]; then
get_cpu_brand() {
    local vendor
    vendor=$(lscpu | grep "Vendor ID" | awk '{print $3}')
    echo "$vendor"
}
# Install microcode based on brand
case "$cpu_brand" in
    "GenuineIntel")
        sudo pacman -S --noconfirm intel-ucode
        echo "Downloading Intel Microcode..."
        ;;
    "AuthenticAMD")
        sudo pacman -S --noconfirm amd-ucode
        echo "Downloading AMD Microcode..."
        ;;
    *)
        echo "Unknown CPU brand. Skipping microcode installation."
        ;;
esac
fi

if [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to download CPU Microcode? (Y/N)"
    read download_answer
    if [[ ${download_answer,,} = "y" || $download_answer = "" ]]; then
# Downloading Microcode
echo "CPU brand:"
echo "1. Intel"
echo "2. AMD"
echo "3. SKIP"
read -p "Enter the number corresponding to your CPU manufacturer: " selected_index

case "$selected_index" in
    1)
        brand="Intel"
        sudo pacman -S --noconfirm intel-ucode
        echo "Downloading Intel Microcode..."
        ;;
    2)
        brand="AMD"
        sudo pacman -S --noconfirm amd-ucode
        echo "Downloading AMD Microcode..."
        ;;
    3)
        brand="SKIP"
        echo "Skipping Microcode installation."
        ;;
    *)
        echo "Invalid selection"
        ;;
esac

echo "Detected CPU brand: $brand"
	fi
elif [[ ${download_answer,,} = "n" ]]; then
        echo "Skipping Micrcode"
    else
        echo "Invalid input. Please enter a valid input"
fi

# Disable GRUB delay

if [[ ${master_answer,,} = "yes" ]]; then
echo "Lowering GRUB boot menu time"
sudo sed -i 's/GRUB_TIMEOUT=[0-9]\+/GRUB_TIMEOUT=-1/' /etc/default/grub
sudo update-grub
fi
if [[ ${master_answer,,} = "no" ]]; then
    echo "Would you liketo disable 5 second GRUB menu on boot (can be reaccesed by holding 'esc' during boot)?"
    read download_answer
    if [[ ${download_answer,,} = "y" || $download_answer = "" ]]; then
echo "Lowering GRUB boot menu time"
sudo sed -i 's/GRUB_TIMEOUT=[0-9]\+/GRUB_TIMEOUT=-1/' /etc/default/grub
sudo update-grub
	fi
	elif [[ ${download_answer,,} = "n" ]]; then
        echo "Skipping GRUB boot menu time Configuring"
    else
        echo "Invalid input. Please enter a valid input"
fi
 
 
# List of packages
packages=("gparted" "libreoffice-fresh" "filezilla" "pulseaudio" "vim" "nvim" "nano" "discord" "gimp" "thunderbird" "vlc" "yay")

# downloads all the packages
for package in "${packages[@]}"; do
    if [[ ${master_answer,,} = "no" ]]; then
        echo "Do you want to download $package? (Y/N)"
        read download_answer
        if [[ ${download_answer,,} = "y" || $download_answer = "" ]]; then
            echo "Downloading $package..."
            sudo pacman -S --noconfirm $package || echo "Failed to download $package"
        fi
    elif [[ ${master_answer,,} = "yes" ]]; then
        echo "Downloading $package..."
        sudo pacman -S --noconfirm $package || echo "Failed to download $package"
    elif [[ ${download_answer,,} == "n" ]]; then
        echo "Skipping $package"
        continue
    else
        echo "Invalid input. Please enter a valid input."
    fi
done

# Multimedia codecs

if [[ ${master_answer,,} = "no" ]]; then
    echo "Do you want to install Multimedia Codecs? (Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
        echo "Installing Multimedia Codecs"
        sudo pacman -S --noconfirm a52dec faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 xvidcore gstreamer0.10-plugins || echo "Failed to install a codec"
    fi
    echo "Multimedia Codecs successfully installed"
fi

if [[ ${master_answer,,} = "yes" ]]; then
    echo "Installing multimedia codecs"
    sudo pacman -S --noconfirm a52dec faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 xvidcore gstreamer0.10-plugins || echo "Failed to install a codec"
    echo "Multimedia Codecs successfully installed"
fi

# Updates packages

echo "Updating packages"
sudo pacman -Syu --noconfirm

# Reboots to set in changes
if [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to reboot to apply/view changes? (Y/N)"
    read download_package
    if [[ ${download_package,,} = "y" || $download_answer = "" ]]; then
	echo "Rebooting"
	reboot || echo "Failed to reboot"
    fi
fi
if [[ ${download_package,,} = "y" ]];
echo "Setup is complete! It is reccomended you restart soon to see all changes"
fi

if [[ ${master_answer,,} = "yes" ]]; then
echo "Rebooting"
	reboot || echo "Failed to reboot"
fi

chmod +x "$0"
